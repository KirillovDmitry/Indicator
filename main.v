`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
//
// модуль отображения двоичного числа на семисегментном индикаторе.
// счетчиком формируется последовательность двоичных чисел, которые отображаются на индикаторе.
// формируются две тактовые частоты: одна синхронизирует обновление состояния индикатора, вторая 
// синхронизирует переключение двоичного регистра исходных данных.
//
//////////////////////////////////////////////////////////////////////////////////

module main(

    input  tg, // входная тактовая частота с кварца (на отладочной плате f = 25МГц)
    
	output S1, // сигнал выбора старшего разрада индикатора
    output S2, // 
    output S3, // 
    output S4, // сигнал выбора младшего разрада индикатора
	
    output DA, // светодиод сегмента индикатора // 7-segment encoding
    output DB, // светодиод сегмента индикатора //      0
    output DC, // светодиод сегмента индикатора //     ---
    output DD, // светодиод сегмента индикатора //  5 |   | 1
    output DE, // светодиод сегмента индикатора //     --- <--6
    output DF, // светодиод сегмента индикатора //  4 |   | 2
    output DG  // светодиод сегмента индикатора //     ---
    											//      3
);

	//-----------------------------------------------------------	
	// делитель входной частоты
	always @(posedge tg)
			REG <= REG + 1'b1; 
	
	parameter par = 15;
	reg [25:0] REG = 0;
	reg clc = 0;
	always @(posedge REG[par])
		clc = ~clc;
		
	//-----------------------------------------------------------	
	// формирование двоичных данных
	reg [13:0] D_ = 0;		
	always @(negedge REG[par+3])
		if (D_ < 9999)
			D_ <= D_ + 1'b1;
		else 
			D_ = 0;
		
	//-----------------------------------------------------------	
	// основной модуль двоично-десятичного преобразования данных
	// и вывода их на светодиодный индикатор
	wire [13:0] D;
	wire [17:0] Q;			
	assign D = D_;
	BinToInd uut3(.D(D), .tg(clc), .S1(S1), .S2(S2), .S3(S3), .S4(S4), .DA(DA), .DB(DB), .DC(DC), .DD(DD),
    .DE(DE), .DF(DF), .DG(DG) );

endmodule
